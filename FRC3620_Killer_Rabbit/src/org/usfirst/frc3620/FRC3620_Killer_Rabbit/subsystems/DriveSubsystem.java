// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3620.FRC3620_Killer_Rabbit.subsystems;

import org.usfirst.frc3620.FRC3620_Killer_Rabbit.RobotMap;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.RobotMode;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.commands.*;
import org.usfirst.frc3620.logger.EventLogging;
import org.usfirst.frc3620.logger.EventLogging.Level;

//import com.ni.vision.NIVision;
//import com.ni.vision.NIVision.DrawMode;
//import com.ni.vision.NIVision.Image;
//import com.ni.vision.NIVision.ShapeMode;
//import com.ni.vision.VisionException;

import java.util.Timer;
import java.util.TimerTask;

import javax.management.RuntimeErrorException;

import org.slf4j.Logger;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.Robot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class DriveSubsystem extends Subsystem {
	Logger logger = EventLogging.getLogger(getClass(), Level.INFO);

	double automaticHeading = 0;

	AHRS ahrs;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftFront = RobotMap.driveSubsystemLeftFront;
    private final SpeedController leftRear = RobotMap.driveSubsystemLeftRear;
    private final SpeedController rightFront = RobotMap.driveSubsystemRightFront;
    private final SpeedController rightRear = RobotMap.driveSubsystemRightRear;
    private final RobotDrive robotDrive41 = RobotMap.driveSubsystemRobotDrive41;
    private final Encoder leftDriveEncoder = RobotMap.driveSubsystemLeftDriveEncoder;
    private final Encoder rightDriveEncoder = RobotMap.driveSubsystemRightDriveEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	//shooterVoltage = edu.wpi.first.wpilibj.Preferences.getInstance().getDouble("Shooter Voltage", 9.0);
    
    boolean haveFrontCamera = false;
	boolean haveRearCamera = false;
	
	boolean kidz = edu.wpi.first.wpilibj.Preferences.getInstance().getBoolean("Kidz", false);
	double kidzKonstant = .75;
	
	int frontCamera;
	int rearCamera;
	int currentCamera;
	//Image frame;
	//NIVision.Rect rect = new NIVision.Rect(10, 10, 100, 100);

	public void arcadeDrive() {
		robotDrive41.arcadeDrive(Robot.oi.driverJoystick);

	}

	public void setDriveForward(double move, double rotate) {
		if (Math.abs(move) <= 0.2) {
			move = 0;
		}
		if (Math.abs(rotate) <= 0.2) {
			rotate = 0;
		}
		robotDrive41.arcadeDrive(move , rotate);

	}

	public void setDriveBackward(double move, double rotate) {
		if (Math.abs(move) <= 0.2) {
			move = 0;
		}
		if (Math.abs(rotate) <= 0.2) {
			rotate = 0;
		}
		robotDrive41.arcadeDrive(-move , rotate);

	}
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new SetDriveToFrontCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		setDefaultCommand(new SetDriveToFrontCommand());
	}

	public void stopMotors() {
		robotDrive41.stopMotor();
		// TODO Auto-generated method stub

	}
	
	static public double angleDifference (double angle1, double angle2 ) {
		double diff = Math.abs(angle1 - angle2);
		if (diff > 180) {
			diff = 360 - diff;
		}
		return diff;
	}

	/**
	 * Bring an angle into the range of 0..360.
	 * -10 turns into 350
	 * 400 turns into 40
	 * @param angle
	 * @return angle brought into range 0..360
	 */
	static public double normalizeAngle(double angle) { 
		// bring into range of -360..360
		double newAngle = angle % 360;
		
		// if it's between -360..0, put it between 0..360
		if (newAngle < 0)
			newAngle += 360;
		
		return newAngle;
	}

	public double getAutomaticHeading() {
		return automaticHeading;
	}

	public double changeAutomaticHeading(double changeAngle) {
		automaticHeading = automaticHeading + changeAngle;
		automaticHeading = normalizeAngle(automaticHeading);
		return automaticHeading;

	}
	
	public void allInit(RobotMode robotMode)
	{
		if(robotMode==RobotMode.TELEOP || robotMode==RobotMode.AUTONOMOUS)
		{
			resetNavX();
			logger.info("NavX is resetting");
			resetEncoders();
			automaticHeading = 0;
		}

	}

	public void resetEncoders()
	{
		leftDriveEncoder.reset();
		rightDriveEncoder.reset();
		
	}

	public void resetNavX() 
	{
		ahrs.resetDisplacement();
		logger.info("Resetting X Displacement, X = {}", ahrs.getDisplacementX());
		ahrs.reset();
		logger.info("Resetting NavX Angle, Angle = {}", ahrs.getAngle());
	}

	// CAMERA*CODE*****CAMERA*CODE*****CAMERA*CODE****CAMERA*CODE******CAMERA*CODE***CAMERA*CODE

	public DriveSubsystem() {
		super();
		
		ahrs = new AHRS(SPI.Port.kMXP);
        logger.info("NaxX connected = {}, firmware = {}", ahrs.isConnected(), ahrs.getFirmwareVersion());

		//frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);

		// the camera name (ex "cam0") can be found through the roborio web
		// interface

	    String frontCameraName = edu.wpi.first.wpilibj.Preferences.getInstance().getString("frontCamera", "cam2");
//		try {
//			frontCamera = NIVision.IMAQdxOpenCamera(frontCameraName, NIVision.IMAQdxCameraControlMode.CameraControlModeController);
//			haveFrontCamera = true;
//			logger.info("we have frontCamera at {}", frontCameraName);
//		} catch (VisionException ex) {
//			// looks like camera 0 is not there
//			logger.info("we are missing frontCamera at {}", frontCameraName);
//		}

		String rearCameraName = edu.wpi.first.wpilibj.Preferences.getInstance().getString("rearCamera", "cam1");
//		try {
//			rearCamera = NIVision.IMAQdxOpenCamera(rearCameraName, NIVision.IMAQdxCameraControlMode.CameraControlModeController);
//			haveRearCamera = true;
//			logger.info("we have rearCamera at {}", rearCameraName);
//		} catch (VisionException ex) {
//			// looks like camera 1 is not there
//			logger.info("we are missing rearCamera at {}", rearCameraName);
//		}

//		if (haveFrontCamera) {
//			currentCamera = frontCamera;
//			NIVision.IMAQdxConfigureGrab(currentCamera);
//			logger.info("using frontCamera");
//		} else if (haveRearCamera) {
//			currentCamera = rearCamera;
//			NIVision.IMAQdxConfigureGrab(currentCamera);
//			logger.info("using rearCamera");
//		}
		
		Timer timer = new Timer();
		timer.schedule(new SendFrameTask(), 0, 30);
	}

	class SendFrameTask extends TimerTask {
		@Override
		public void run() {
			sendFrame();
		}
	}

	 
	
	String nameOfCurrentCamera() {
		if (currentCamera == frontCamera) {
			return "frontCamera";
		} else if (currentCamera == rearCamera) {
			return "rearCamera";
		} else {
			return "darned if we know which camera it is";
		}
	}

//	public void cameraToRear() {
//		if (haveRearCamera) {
//			logger.info("using rearCamera");
//			try {
//			    NIVision.IMAQdxStopAcquisition(currentCamera);
//			} catch (VisionException ex) {
//				logger.warn("trouble stopping {}, ignoring the problem", nameOfCurrentCamera());
//			}
//			currentCamera = rearCamera;
//			NIVision.IMAQdxConfigureGrab(currentCamera);
//		} else {
//			logger.info("can't use rearCamera");
//		}
//	}

//	public void switchCamera() {
//		if (currentCamera == rearCamera) {
//			cameraToFront();
//		} else if (currentCamera == frontCamera) {
//			cameraToRear();
//		}
//	}

	boolean weHaveAlreadyWarned = false;

	public void sendFrame() {
		if (haveFrontCamera || haveRearCamera) {

//			try {
//				NIVision.IMAQdxGrab(currentCamera, frame, 1);
//				NIVision.imaqDrawShapeOnImage(frame, frame, rect, DrawMode.DRAW_VALUE, ShapeMode.SHAPE_OVAL, 0.0f);
//
//				CameraServer.getInstance().setImage(frame);
//			} catch (VisionException ex) {
//				String message = ex.getMessage();
//				if (message.equals("IMAQdxError: -1074360306: No acquisition in progress.")) {
//					logger.info ("vision got a \"No acquisition in progress.\", we're ignoring it");
//				} else {
//					logger.warn("we lost the camera '{}': {}", nameOfCurrentCamera(), ex.toString());
//					ex.printStackTrace();
//					
//					if (currentCamera == frontCamera) {
//						logger.info("disabling front camera");
//						haveFrontCamera = false;
//						//cameraToRear();
//					} else if (currentCamera == rearCamera) {
//						logger.info("disabling rear camera");
//						haveRearCamera = false;
//						//cameraToFront();
//					}
//				}
//			}

		} else {
			if (!weHaveAlreadyWarned) {
				logger.warn("no cameras to send a frame from");
			}
			weHaveAlreadyWarned = true;
		}

	}
	
    public double getRoll() {
        return ahrs.getRoll();
    }
    public double getAngle() {
        return ahrs.getAngle();
    }
    public double getPitch() {
        return ahrs.getPitch();
    }
    public double getAccelX() {
        return ahrs.getRawAccelX();
    }
    public double getAccelY() {
        return ahrs.getRawAccelY();
    }
    public double getAccelZ() {
        return ahrs.getRawAccelZ();
    }
    public double getDisplacementX() {
        return ahrs.getDisplacementX();
    }
    public double getDisplacementY() {
        return ahrs.getDisplacementY();
    }
    public double getDisplacementZ() {
        return ahrs.getDisplacementZ();
    }
    public AHRS getAhrs() {
        return ahrs;
    }
}
