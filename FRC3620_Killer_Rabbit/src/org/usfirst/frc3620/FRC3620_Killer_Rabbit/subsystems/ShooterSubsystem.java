// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.FRC3620_Killer_Rabbit.subsystems;



import org.slf4j.Logger;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.Robot;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.RobotMap;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.commands.*;
import org.usfirst.frc3620.logger.EventLogging;
import org.usfirst.frc3620.logger.EventLogging.Level;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogTrigger;
import edu.wpi.first.wpilibj.AnalogTriggerOutput.AnalogTriggerType;
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.InterruptHandlerFunction;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class ShooterSubsystem extends Subsystem {
	Logger logger = EventLogging.getLogger(getClass(), Level.INFO);

	private final CANTalon shooterCANTalon2 = RobotMap.shooterSubsystemShooterCANTalon2;
    private final CANTalon shooterCANTalon3 = RobotMap.shooterSubsystemShooterCANTalon3;
    private final SpeedController shooterPositionTalon = RobotMap.shooterSubsystemShooterPositionTalon;
    private final AnalogInput shooterTiltSensor  = RobotMap.shooterSubsystemTiltSensor;
    private final DigitalInput shooterHomeDigitalInput = RobotMap.shooterSubsystemHomeDigitalInput;
    
    boolean shooterWasRunning;
    boolean potIsValid;
    
    Timer timer = new Timer();
    
	
    public ShooterSubsystem() {
		super();
		
		shooterCANTalon2.changeControlMode(CANTalon.TalonControlMode.Voltage);
		shooterCANTalon2.setVoltageCompensationRampRate(24.0);
		shooterCANTalon2.enableBrakeMode(false);
		
		shooterCANTalon3.changeControlMode(CANTalon.TalonControlMode.Voltage);
		shooterCANTalon3.setVoltageCompensationRampRate(24.0);
		shooterCANTalon3.enableBrakeMode(false);
		
		//shooterCANTalon3.set(shooterCANTalon2.getDeviceID());
		
		// TODO Auto-generated constructor stub
		
	    if(isShooterAtHome())
	    	{
	    		logger.info("Shooter Position at home");
	    		
	    	}
	}
    
    public void setShooterVoltage(double voltage)
    {
    	SmartDashboard.putNumber("ShooterVoltage", voltage);
    	
    	shooterCANTalon2.set(voltage);
    	shooterCANTalon3.set(voltage);
		if (voltage == 0) 
		{
			//Motors are off here.
			if (shooterWasRunning)
			{
				//We just turned the shooter off.
				logger.info("Shooter just stopped running");
		    	timer.stop();
				timer.reset();
			}
			shooterWasRunning=false;
		}
		else
		{
			//Motors are on here.
			if (!shooterWasRunning)
			{				
				//We just turned the shooter on.
				logger.info("Shooter just started running");
				timer.start();
			}
			shooterWasRunning=true;
		}
    }
    
    public boolean isShooterSpunUp()
    {
		return timer.get() > 1;
    }
    
    public void moveShooterPositionUp(double power)
    {
    	setMoveTilt(power);
    }
    
    public void moveShooterPositionDown(double power)
    {
    	setMoveTilt(-power);

    }
    
    public void stopShooterPositionTalon()
    {
    	shooterPositionTalon.set(0);
    }
    
    public double getTiltPotentiometerPostion () 
    {
    	return shooterTiltSensor.getAverageVoltage();
    }
    
    public boolean isPotValid()
    {
    	return !shooterHomeDigitalInput.get();
    }
    
    public void setMoveTilt(double power)
    {
    	if (power < 0 && isShooterAtHome()) {
    		// don't go past home
    		power = 0;
    	}
    	shooterPositionTalon.set(power);
    }
    
    public boolean isShooterAtHome() {
    	return !shooterHomeDigitalInput.get();
    }
    
    
    public void initDefaultCommand() {
    	setDefaultCommand(new ShooterTiltCommand());

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

